import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import org.apache.tools.ant.filters.ReplaceTokens
import java.util.regex.Matcher

buildscript {
    ext.kotlin_version = '1.9.22'
    ext.spring_boot_version = '3.2.2'
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "$kotlin_version"
    id "org.jetbrains.kotlin.plugin.spring" version "$kotlin_version"
    id "antlr"
    id "war"
    id "idea"
    id "org.springframework.boot" version "$spring_boot_version"
    id "io.spring.dependency-management" version "1.1.4"
    id "org.ajoberstar.grgit" version "3.0.0"
}

repositories {
    mavenCentral()
    google()
    maven {
        url "https://m2.objectdb.com"
    }
}

apply plugin: 'kotlin'
apply plugin: 'project-report'

dependencies {
    antlr 'org.antlr:antlr4:4.13.1'
    implementation (
            "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version",
            "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version",
            "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version",
            "org.flywaydb:flyway-core:10.7.2",
            'jakarta.validation:jakarta.validation-api:3.1.0-M1',
            'org.antlr:antlr4-runtime:4.13.1',
            'com.google.guava:guava:33.0.0-jre',
            'org.reflections:reflections:0.10.2',
            'org.apache.commons:commons-lang3:3.14.0',
            'org.apache.commons:commons-compress:1.25.0',
            'commons-io:commons-io:2.15.1',
            'commons-codec:commons-codec:1.16.0',
            'org.eclipse.persistence:org.eclipse.persistence.jpa:2.7.13',
            'javax.transaction:jta:1.1',
            'com.objectdb:objectdb:2.8.9',
            'org.yaml:snakeyaml:2.2',
            "org.springframework.boot:spring-boot-starter:$spring_boot_version",
            "org.springframework.boot:spring-boot-starter-web:$spring_boot_version",
            "org.springframework.boot:spring-boot-starter-mail:$spring_boot_version",
            "org.springframework.boot:spring-boot-starter-jdbc:$spring_boot_version",
            "org.springframework.boot:spring-boot-starter-data-jpa:$spring_boot_version",
            "org.springframework.boot:spring-boot-starter-log4j2:$spring_boot_version",
            "org.springframework.boot:spring-boot-starter-thymeleaf:$spring_boot_version",
            "org.springframework.boot:spring-boot-starter-security:$spring_boot_version",
            "org.springframework.boot:spring-boot-starter-validation:$spring_boot_version",
            'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.3.0',
            'org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.1.2.RELEASE',
            'javax.xml.bind:jaxb-api:2.4.0-b180830.0359',
            'org.springframework.boot:spring-boot-devtools',
            'javax.xml.bind:jaxb-api',
            'org.json:json:20231013',
            'org.seleniumhq.selenium:selenium-java:4.17.0',
            'com.h2database:h2:2.2.224'
    )

    runtimeOnly(
            'com.mysql:mysql-connector-j:8.3.0',
    )

    if (project.getGradle().startParameter.taskNames.contains("bootWar")) {
        providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    }

    testImplementation(
            'org.springframework.boot:spring-boot-starter-test',
            'org.springframework.security:spring-security-test',
            'org.junit.jupiter:junit-jupiter-api:5.10.1',
            'org.junit.jupiter:junit-jupiter-params:5.10.1',
    )

    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.10.1'
    )

    compileOnly "org.springframework.boot:spring-boot-configuration-processor"
}

configurations {
    configureEach {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

idea {
    module {
        contentRoot = file("$projectDir")

        sourceDirs = new LinkedHashSet<File>()
        sourceDirs += file("src/main/java")
        sourceDirs += file("src/main/antlr")

        testSourceDirs = new LinkedHashSet<File>()
        testSourceDirs += file("src/test/java")
        testSourceDirs += file("src/webTest/java")

        resourceDirs += file("src/main/resources")

        //generatedSourceDirs - fix for Idea 2018.3
        sourceDirs += file("${buildDir}/tmp/src/main/antlr")

        excludeDirs += file("${buildDir}/tmp/src/main/java")
        excludeDirs += file("${buildDir}/tmp/src/test/java")
    }
}

group = 'uk.ac.warwick.dcs.sherlock'
version = "release"

if (grgit != null) {
    project.ext.lastTag = grgit.tag.list().findAll { (it.name ==~ /([0-9]+).([0-9]+)$/).find() }.sort { -it.commit.time }.sort { -TagSupport.tagOrder(/([0-9]+).([0-9]+)$/, it.name) }.collect { it.name }[0]
    project.ext.latest = grgit.tag.list().find { it.name == project.lastTag.toString() }.collect { it }[0]
    if (project.ext.latest != null && project.ext.latest.name != null) {
        project.ext.count = grgit.log { range(project.ext.latest.name, "HEAD") }.size()
        project.version = "${project.ext.lastTag}.${project.count}"
    }
}

if (System.env.TRAVIS == "true") {
    println "Building on travis"
    build.dependsOn javadoc
    new File("version.txt").text = """build/${project.version}"""
}


description = """Sherlock"""

tasks.register('printVersion') {
    println project.name + '-' + project.version
}

javadoc {
    source = ["src/main/java"]
    destinationDir = file("${projectDir}/docs")
}

generateGrammarSource {
    outputDirectory = file("${buildDir}/tmp/src/main/antlr/uk/ac/warwick/dcs/sherlock/module/model/base/lang")
}

tasks.register('generateSources', Copy) {
    from("src/main/java")
    exclude "**/sherlock/deprecated/**"
    into "$buildDir/tmp/src/main/java"
    filter(ReplaceTokens, tokens: [VERSION: project.version.toString()])
}
sourceSets.main.java.srcDirs = ["$buildDir/tmp/src/main/java", "$buildDir/tmp/src/main/antlr"]
compileJava.dependsOn generateSources

tasks.register('generateTestSources', Copy) {
    from("src/test/java")
    exclude "**/sherlock/deprecated/**"
    into "$buildDir/tmp/src/test/java"
}
sourceSets.test.java.srcDirs = ["$buildDir/tmp/src/test/java"]

tasks.register('deps', Copy) {
    from configurations.runtime
    into "$buildDir/out/lib"
}

jar {
    from sourceSets.main.output
    include 'uk/ac/warwick/dcs/sherlock/api/**'
    include 'uk/ac/warwick/dcs/sherlock/module/model/base/**'

    enabled = true //enable to build a standard jar
    destinationDir = file("$buildDir/out")
    classifier = 'dev'
    manifest {
        attributes(
                'Implementation-Version': version,
        )
    }
    delete fileTree("$buildDir/out") {
        include '*-dev.jar'
        exclude jar.archiveName
        exclude jar.archivePath.getName()
    }
}

bootJar {
    // dependsOn sassCompile
    destinationDir = file("$buildDir/out")
    setMainClass("uk.ac.warwick.dcs.sherlock.launch.SherlockClient")
    manifest {
        attributes(
                'Implementation-Version': version
        )
    }
    delete fileTree("$buildDir/out") {
        include '*.jar'
        exclude bootJar.archiveName
        exclude jar.archivePath.getName()
        exclude '*-dev.jar'
    }
}
jar.dependsOn bootJar

bootWar {
    destinationDir = file("$buildDir/out")
    setMainClass("uk.ac.warwick.dcs.sherlock.launch.SherlockServer")
    manifest {
        attributes(
                'Implementation-Version': version
        )
    }
    delete fileTree("$buildDir/out") {
        include '*.war'
        exclude bootJar.archiveName
        exclude war.archivePath.getName()
    }
}
war.dependsOn bootWar
assemble.dependsOn jar

bootRun {
    setMainClass("uk.ac.warwick.dcs.sherlock.launch.SherlockClient")
    jvmArgs = ["-Dspring.profiles.active=dev", "-Dspring.output.ansi.enabled=ALWAYS"]
}

tasks.register('branchSetup') {
    if (grgit != null) {
        ant.replaceregexp(match: '# Sherlock(.*)', replace: "# Sherlock  [![Build Status: ${grgit.branch.current().name}](https://travis-ci.org/DCS-Sherlock/Sherlock.svg?branch=${grgit.branch.current().name})](https://travis-ci.org/DCS-Sherlock/Sherlock?branch=${grgit.branch.current().name})", flags: 's', byline: true) {
            fileset(dir: project.projectDir, includes: 'README.md')
        }
    }
}

tasks.withType(KotlinCompile).configureEach {
    compilerOptions {
        freeCompilerArgs += '-Xjsr305=strict'
        jvmTarget = JavaVersion.VERSION_17
    }
}

class TagSupport {
    static int tagOrder(String tagPattern, String tagName) {
        final Matcher m = tagName =~ tagPattern

        if (m.find()) {
            int ngroups = m.groupCount()

            if (ngroups < 1) {
                throw new IllegalArgumentException("Tag pattern is expected to have at least one number grouping instruction: $tagPattern")
            } else {
                return m.group(1) as int
            }
        } else {
            throw new IllegalStateException("Tag $tagName should have matched $tagPattern")
        }
    }
}
